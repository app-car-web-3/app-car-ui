import React, { useEffect, useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { putData, fetchData } from "../../api/api";

const imageSchema = z.object({
    imageId: z.number(),
    name: z.string(),
    url: z.string().url("Invalid URL format"),
});

const brandSchema = z.object({
    brandId: z.number(),
    name: z.string(),
    description: z.string(),
    imageId: imageSchema,
});

const carSchema = z.object({
    carId: z.number().optional(),
    name: z.string(),
    description: z.string(),
    brandId: z.preprocess((val) => Number(val), z.number()),
    model: z.string(),
    price: z.preprocess((val) => Number(val), z.number().positive()),
    color: z.string(),
    motorType: z.string(),
    power: z.preprocess((val) => Number(val), z.number().positive()),
    placeNumber: z.preprocess((val) => Number(val), z.number().positive()),
    status: z.string(),
    type: z.string(),
    imageId: z.preprocess((val) => Number(val), z.number()),
});

type Image = z.infer<typeof imageSchema>;
type Brand = z.infer<typeof brandSchema>;
type CarFormData = z.infer<typeof carSchema>;

interface CarSubmitData extends Omit<CarFormData, 'brandId' | 'imageId'> {
    brandId: Brand;
    imageId: Image;
}

const UpdateCarComponent = ({ id }: { id: number }) => {
    const [car, setCar] = useState<CarFormData | null>(null);
    const [brands, setBrands] = useState<Brand[]>([]);
    const [images, setImages] = useState<Image[]>([]);

    const { register, handleSubmit, formState: { errors }, reset } = useForm<CarFormData>({
        resolver: zodResolver(carSchema),
        defaultValues: car || {}
    });

    useEffect(() => {
        const fetchCar = async () => {
            try {
                const response = await fetch(`http://localhost:8080/api/cars/${id}`);
                const data = await response.json();
                setCar(data);
                reset(data);
            } catch (error) {
                console.error("Error fetching car data:", error);
            }
        };

        fetchCar();
    }, [id, reset]);

    useEffect(() => {
        const fetchBrandsList = async () => {
            try {
                const data = await fetchData("http://localhost:8080/api/brand/all");
                setBrands(data as Brand[]);
            } catch (error) {
                console.error("Error fetching brands data:", error);
            }
        };

        const fetchImagesList = async () => {
            try {
                const data = await fetchData("http://localhost:8080/api/image/all");
                setImages(data as Image[]);
            } catch (error) {
                console.error("Error fetching images data:", error);
            }
        };

        fetchBrandsList();
        fetchImagesList();
    }, []);

    const onSubmit: SubmitHandler<CarFormData> = async (formData) => {
        try {
            const selectedBrand = brands.find(brand => brand.brandId === formData.brandId);
            const selectedImage = images.find(image => image.imageId === formData.imageId);

            if (!selectedBrand || !selectedImage) {
                alert('Invalid brand or image selection.');
                return;
            }

            const data: CarSubmitData = {
                ...formData,
                brandId: selectedBrand,
                imageId: selectedImage,
            };

            const url = `http://localhost:8080/api/cars/${id}`;
            await putData<CarSubmitData>(url, data);
            alert('Car updated successfully!');
            window.location.href = 'http://localhost:3000/admin/cars';
        } catch (error) {
            console.error('Error updating car:', error);
        }
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div className="relative w-full max-w-md bg-white p-6 rounded-3xl shadow-lg">
                <div className="flex justify-end">
                    <svg
                        className="w-6 h-6 text-gray-800 dark:text-white hover:scale-105 transition duration-300 ease-in-out"
                        aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        fill="none"
                        viewBox="0 0 24 24"
                        onClick={() => window.location.href = 'http://localhost:3000/admin/cars'}
                    >
                        <path
                            stroke="currentColor"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth="2"
                            d="M6 18 17.94 6M18 18 6.06 6"
                        />
                    </svg>
                </div>
                <div className="font-medium flex flex-row justify-between mt-8 mx-4">
                    <p className="mt-3 text-base">Update Car</p>
                </div>
                <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 mt-6 mx-4">
                    <div>
                        <label htmlFor="brandId" className="block text-xs font-medium text-gray-700">Brand</label>
                        <select id="brandId" {...register("brandId")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600">
                            <option value="">Select a brand</option>
                            {brands.map((brand) => (
                                <option key={brand.brandId} value={brand.brandId}>
                                    {brand.name}
                                </option>
                            ))}
                        </select>
                        {errors.brandId && <p className="text-red-600 text-xs mt-1">{errors.brandId.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="imageId" className="block text-xs font-medium text-gray-700">Image</label>
                        <select id="imageId" {...register("imageId")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600">
                            <option value="">Select an image</option>
                            {images.map((image) => (
                                <option key={image.imageId} value={image.imageId}>
                                    {image.name}
                                </option>
                            ))}
                        </select>
                        {errors.imageId && <p className="text-red-600 text-xs mt-1">{errors.imageId.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="name" className="block text-xs font-medium text-gray-700">Name</label>
                        <input type="text" id="name" {...register("name")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.name && <p className="text-red-600 text-xs mt-1">{errors.name.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="description" className="block text-xs font-medium text-gray-700">Description</label>
                        <input type="text" id="description" {...register("description")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.description && <p className="text-red-600 text-xs mt-1">{errors.description.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="model" className="block text-xs font-medium text-gray-700">Model</label>
                        <input type="text" id="model" {...register("model")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.model && <p className="text-red-600 text-xs mt-1">{errors.model.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="price" className="block text-xs font-medium text-gray-700">Price</label>
                        <input type="text" id="price" {...register("price")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.price && <p className="text-red-600 text-xs mt-1">{errors.price.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="color" className="block text-xs font-medium text-gray-700">Color</label>
                        <input type="text" id="color" {...register("color")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.color && <p className="text-red-600 text-xs mt-1">{errors.color.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="motorType" className="block text-xs font-medium text-gray-700">Motor Type</label>
                        <input type="text" id="motorType" {...register("motorType")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.motorType && <p className="text-red-600 text-xs mt-1">{errors.motorType.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="power" className="block text-xs font-medium text-gray-700">Power</label>
                        <input type="text" id="power" {...register("power")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.power && <p className="text-red-600 text-xs mt-1">{errors.power.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="placeNumber" className="block text-xs font-medium text-gray-700">Place Number</label>
                        <input type="text" id="placeNumber" {...register("placeNumber")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.placeNumber && <p className="text-red-600 text-xs mt-1">{errors.placeNumber.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="status" className="block text-xs font-medium text-gray-700">Status</label>
                        <select id="status" {...register("status")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600">
                            <option value="Pinned">Pinned</option>
                            <option value="NotPinned">Not Pinned</option>
                        </select>
                        {errors.status && <p className="text-red-600 text-xs mt-1">{errors.status.message}</p>}
                    </div>
                    <div>
                        <label htmlFor="type" className="block text-xs font-medium text-gray-700">Type</label>
                        <input type="text" id="type" {...register("type")} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm hover:border-gray-600" />
                        {errors.type && <p className="text-red-600 text-xs mt-1">{errors.type.message}</p>}
                    </div>
                    <div className="mt-6 mx-4 bg-gray-800 rounded-3xl hover:bg-gray-600 transition duration-300 ease-in-out">
                        <button type="submit" className="w-full px-4 py-2 text-white">
                            Update
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default UpdateCarComponent;
